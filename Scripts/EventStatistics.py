#!/usr/bin/env python
"""
------------------------------------------------------------------------

Script to extract events statistics from simulations generated by cosima:

Author: Daniel Kocevski (dankocevski@gmail.com)
Date: May 28th, 2020

Usage Examples:
import EventStatistics
EventStatistics.run('MyComPair_Tower.inc1.id1.sim')

------------------------------------------------------------------------
"""

import EventViewer
import numpy
import matplotlib.pylab as plot
# import pandas

##########################################################################################

def run(filename, showPlots=False):

	simulation = EventViewer.parse(filename)

	totalNumberOfHitsInDetector = 0
	totalNumberOfHitsInPassiveMaterial = 0
	totalNumberOfHitsOnlyInDetector = 0
	totalNumberOfVetodHitsInDetector = 0
	energyDepositedInDetector = []
	energyDepositedInPassiveMaterial = []
	energyEscaped = []
	energyInitial = []
	indexOfVetoedEvents = []
	indexOfNonVetoedEvents = []
	firstInteractionTypeShield = []
	firstInteractionTypeDetector = []
	interactionDistributionShield = {}
	interactionDistributionDetector = {}

	index = 0

	for event in simulation.events:

		energyDepositedInDetector.append(float(event.depositedEnergy))
		energyDepositedInPassiveMaterial.append(float(event.depositedEnergy_NonSensitiveMaterial))
		energyEscaped.append(float(event.escapedEnergy))
		energyInitial.append(float(event.initialEnergy))

		for interaction in event.interactions.interactionType:
			if 'INIT' in interaction or 'RAYL' in interaction or 'ENTR' in interaction:
				pass
			else:
				firstInteractionThatDepositedEnergy = interaction
				break

		if float(event.depositedEnergy) != 0:
			totalNumberOfHitsInDetector = totalNumberOfHitsInDetector + 1

		if float(event.depositedEnergy_NonSensitiveMaterial) != 0:
			totalNumberOfHitsInPassiveMaterial = totalNumberOfHitsInPassiveMaterial + 1
			indexOfVetoedEvents.append(index)
			firstInteractionTypeShield.append(firstInteractionThatDepositedEnergy)

		else:
			indexOfNonVetoedEvents.append(index)
			firstInteractionTypeDetector.append(firstInteractionThatDepositedEnergy)

		if float(event.depositedEnergy) != 0 and float(event.depositedEnergy_NonSensitiveMaterial) == 0:
			totalNumberOfHitsOnlyInDetector = totalNumberOfHitsOnlyInDetector + 1

		index = index + 1


	if len(simulation.events) != 0:

		fractionOfEventsPassingVeto = 100*float(totalNumberOfHitsOnlyInDetector)/totalNumberOfHitsInDetector
		fractionOfEventsVetoed = 100*float(totalNumberOfHitsInPassiveMaterial)/totalNumberOfHitsInDetector
		detectionEffeciency = 100*float(totalNumberOfHitsInDetector)/simulation.totalNumberOfSimulatedEvents
		detectionEffeciencyWithVeto = 100*float(totalNumberOfHitsOnlyInDetector)/simulation.totalNumberOfSimulatedEvents

		firstInteractionTypeShield = numpy.array(firstInteractionTypeShield)
		firstInteractionTypeDetector = numpy.array(firstInteractionTypeDetector)

		interactionDistributionShield['COMP'] = len((numpy.where(firstInteractionTypeShield == 'COMP')[0]))
		interactionDistributionShield['PHOT'] = len((numpy.where(firstInteractionTypeShield == 'PHOT')[0]))
		interactionDistributionDetector['COMP'] = len((numpy.where(firstInteractionTypeDetector == 'COMP')[0]))
		interactionDistributionDetector['PHOT'] = len((numpy.where(firstInteractionTypeDetector == 'PHOT')[0]))

	else:

		totalNumberOfHitsOnlyInDetector = 0
		fractionOfEventsPassingVeto = 0
		fractionOfEventsVetoed = 0
		detectionEffeciency = 0
		detectionEffeciencyWithVeto = 0

		interactionDistributionShield = 0
		interactionDistributionDetector = 0

		energyDepositedInPassiveMaterial = 0
		energyDepositedInDetector = 0

	print("\nTotal number of simulated events: %s" % simulation.totalNumberOfSimulatedEvents)
	print("Total number of hits in detector: %s" % totalNumberOfHitsInDetector)
	# print("Total number of hits only in detector: %s" % totalNumberOfHitsOnlyInDetector)
	print("Total number of hits in passive material and detector: %s" % totalNumberOfHitsInPassiveMaterial)
	# print("Fraction of events that would pass veto: %.2f%%" % fractionOfEventsPassingVeto)
	# print("Fraction of events that would be vetoed: %.2f%%" % fractionOfEventsVetoed)
	print("Detection effeciency: %.2f%%" % detectionEffeciency)
	# print("Detection effeciency with veto: %.2f%%" % detectionEffeciencyWithVeto)

	if showPlots == True:

		energyDepositedInDetector = numpy.array(energyDepositedInDetector)
		energyDepositedInPassiveMaterial = numpy.array(energyDepositedInPassiveMaterial)
		energyEscaped = numpy.array(energyEscaped)

		plot.hist(energyDepositedInDetector, bins=30, color='#3e4d8b', alpha=0.9)
		plot.hist(energyDepositedInDetector[indexOfNonVetoedEvents], bins=30, color='#006400', alpha=0.9)
		# plot.hist(energyDepositedInPassiveMaterial, bins=50, color='#006400', alpha=0.9)

		plot.yscale('log')
		plot.xlabel('Energy(keV)')
		plot.show()

	results = [fractionOfEventsPassingVeto, fractionOfEventsVetoed, detectionEffeciency, detectionEffeciencyWithVeto, interactionDistributionShield, interactionDistributionDetector, energyDepositedInPassiveMaterial, energyDepositedInDetector]

	return results


##########################################################################################

def runMany(filenames):

	energies = []
	fractionOfEventsPassingVetoArray = []
	fractionOfEventsVetoedArray = []
	detectionEffeciencyArray = []
	detectionEffeciencyWithVetoArray = []
	interactionDistributionShieldArray = []
	interactionDistributionDetectorArray = []
	energyDepositedInPassiveMaterialArray = []
	energyDepositedInDetectorArray = []

	for filename in filenames:

		# print "\nParsing: %s" % filename.split('/')[-1]
		print("\nParsing: %s" % filename)

		energy = float(filename.split('/')[-1].split('_')[1].replace('keV',''))

		results = run(filename)

		fractionOfEventsPassingVeto = results[0]
		fractionOfEventsVetoed = results[1]
		detectionEffeciency = results[2]
		detectionEffeciencyWithVeto = results[3]
		interactionDistributionShield = results[4]
		interactionDistributionDetector = results[5]
		energyDepositedInPassiveMaterial = numpy.array(results[6])
		energyDepositedInDetector = numpy.array(results[7])

		energies.append(energy)
		fractionOfEventsPassingVetoArray.append(fractionOfEventsPassingVeto)
		fractionOfEventsVetoedArray.append(fractionOfEventsVetoed)
		detectionEffeciencyArray.append(detectionEffeciency)
		detectionEffeciencyWithVetoArray.append(detectionEffeciencyWithVeto)
		energyDepositedInPassiveMaterialArray.append([numpy.median(energyDepositedInPassiveMaterial), numpy.std(energyDepositedInPassiveMaterial)])
		energyDepositedInDetectorArray.append([numpy.median(energyDepositedInDetector), numpy.std(energyDepositedInDetector)])

		try:
			interactionDistributionShieldArray.append((float(interactionDistributionShield['COMP'])/float(interactionDistributionShield['COMP']+interactionDistributionShield['PHOT'])))
		except Exception as message:
			# print message
			print(interactionDistributionShield)
			interactionDistributionShieldArray.append(0)

		try:
			interactionDistributionDetectorArray.append((float(interactionDistributionDetector['COMP'])/float(interactionDistributionDetector['COMP']+interactionDistributionDetector['PHOT'])))
		except Exception as message:
			# print message
			print(interactionDistributionDetector)
			interactionDistributionDetectorArray.append(0)

	energies = numpy.array(energies)
	fractionOfEventsPassingVetoArray = numpy.array(fractionOfEventsPassingVetoArray)
	fractionOfEventsVetoedArray = numpy.array(fractionOfEventsVetoedArray)
	detectionEffeciencyArray = numpy.array(detectionEffeciencyArray)
	detectionEffeciencyWithVetoArray = numpy.array(detectionEffeciencyWithVetoArray)
	interactionDistributionShieldArray = numpy.array(interactionDistributionShieldArray)
	interactionDistributionDetectorArray = numpy.array(interactionDistributionDetectorArray)
	energyDepositedInPassiveMaterialArray = numpy.array(energyDepositedInPassiveMaterialArray)
	energyDepositedInDetectorArray = numpy.array(energyDepositedInDetectorArray)

	index_sort = numpy.argsort(energies)

	energies = energies[index_sort]
	fractionOfEventsPassingVetoArray = fractionOfEventsPassingVetoArray[index_sort]
	fractionOfEventsVetoedArray = fractionOfEventsVetoedArray[index_sort]
	detectionEffeciencyArray = detectionEffeciencyArray[index_sort]
	detectionEffeciencyWithVetoArray = detectionEffeciencyWithVetoArray[index_sort]
	interactionDistributionShieldArray = interactionDistributionShieldArray[index_sort]
	interactionDistributionDetectorArray = interactionDistributionDetectorArray[index_sort]
	energyDepositedInPassiveMaterialArray = energyDepositedInPassiveMaterialArray[index_sort]
	energyDepositedInDetectorArray = energyDepositedInDetectorArray[index_sort]


	return energies, fractionOfEventsPassingVetoArray, fractionOfEventsVetoedArray, detectionEffeciencyArray, detectionEffeciencyWithVetoArray, energyDepositedInPassiveMaterialArray, energyDepositedInDetectorArray

